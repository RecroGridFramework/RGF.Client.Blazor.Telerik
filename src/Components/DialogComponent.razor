<TelerikWindow @ref="_window"
               Visible="@_visible"
               Modal="@DialogParameters.IsModal"
               Draggable="true"
               Resizable="DialogParameters.Resizable ?? false"
               Class="@DialogParameters.CssClass"
               ThemeColor="@ThemeColor"
               FooterLayoutAlign="@WindowFooterLayoutAlign.End"
               Width="@(DialogParameters.Width != null ? $"{DialogParameters.Width}px" : "auto")"
               Height="@(DialogParameters.Height != null ? $"{DialogParameters.Height}px" : null)"
               Top="@_top"
               Left="@_left"
               MaxHeight="80%"
               VisibleChanged="OnVisibleChanged" StateChanged="OnStateChanged">
    <WindowActions>
        <WindowAction Name="Close" OnClick="OnClose" />
    </WindowActions>
    <WindowTitle>
        @DialogParameters.Header
    </WindowTitle>
    <WindowContent>
        @DialogParameters.Content
        @DialogParameters.DynamicChild
    </WindowContent>
    <WindowFooter>
        @if (DialogParameters.FooterTemplate != null)
        {
            @DialogParameters.FooterTemplate
        }
        <div class="flex-container">
            <div class="k-flex-layout k-flex-row k-justify-content-between k-align-items-center">
                <div class="k-flex-layout k-justify-content-flex-start">
                    @foreach (var button in DialogParameters.LeftButtons ?? [])
                    {
                        @CreateButton(button)
                    }
                </div>
                <div class="k-flex-layout k-justify-content-flex-end">
                    @foreach (var button in DialogParameters.PredefinedButtons ?? [])
                    {
                        @CreateButton(button)
                    }
                </div>
            </div>
        </div>
    </WindowFooter>
</TelerikWindow>

@inject IJSRuntime _jsRuntime
@code {

    [Parameter, EditorRequired]
    public RgfDialogParameters DialogParameters { get; set; } = null!;

    private TelerikWindow _window { get; set; } = default!;
    private bool _visible { get; set; } = true;
    private bool _closed { get; set; }
    private bool _isDestroyed = false;
    private string? _top { get; set; }
    private string? _left { get; set; }

    private string ThemeColor
    {
        get
        {
            switch (DialogParameters.DialogType)
            {
                case DialogType.Error:
                    return ThemeConstants.Button.ThemeColor.Primary;

                case DialogType.Warning:
                    return ThemeConstants.Button.ThemeColor.Dark;

                case DialogType.Info:
                default:
                    return ThemeConstants.Button.ThemeColor.Light;
            }
        }
    }

    private RenderFragment<ButtonParameters> CreateButton => (button) =>
    @<div class="k-p-1">
        <TelerikButton Title="@button.Title" ThemeColor="@(button.IsPrimary ? ThemeConstants.Button.ThemeColor.Primary : ThemeConstants.Button.ThemeColor.Base)" Class="@button.CssClass"
                       Icon="@CreateIcon(button.IconName)" Enabled="@(!button.Disabled)" OnClick="button.Callback">
            @if (!string.IsNullOrEmpty(button.ChildText))
        {
            @button.ChildText
        }
        else if (button.ChildContent != null)
        {
            @button.ChildContent
        }
        </TelerikButton>
    </div>;

    private ISvgIcon? CreateIcon(string? iconName)
    {
        if (!string.IsNullOrEmpty(iconName))
        {
            var property = typeof(SvgIcon).GetProperty(iconName);
            if (property != null)
            {
                return (ISvgIcon?)property.GetValue(null);
            }
        }
        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(DialogParameters.UniqueName))
        {
            var pos = await _jsRuntime.InvokeAsync<object[]>(RGFClientBlazorTelerikConfiguration.JsBlazorTelerikUiNamespace + ".Dialog.loadDialogPos", DialogParameters.UniqueName);
            if (pos is object[] p)
            {
                DialogParameters.Width = p[0].ToString();
                DialogParameters.Height = p[1].ToString();
                _top = p[2].ToString() + "px";
                _left = p[3].ToString() + "px";
            }
        }
        DialogParameters.Destroy = Destroy;
    }

    private void Destroy()
    {
        if (!_isDestroyed)
        {
            if (!string.IsNullOrEmpty(DialogParameters.UniqueName))
            {
                _ = _jsRuntime.InvokeVoidAsync(RGFClientBlazorTelerikConfiguration.JsBlazorTelerikUiNamespace + ".Dialog.saveDialogPos", DialogParameters.UniqueName, _window.Width, _window.Height, _window.Top, _window.Left);
            }
            _isDestroyed = true;
        }
    }

    private void OnClose()
    {
        if (!_closed && DialogParameters.OnClose != null)
        {
            var cancel = DialogParameters.OnClose.Invoke() == false;
            if (cancel)
            {
                _visible = true;
                return;
            }
        }
        _closed = true;
    }

    private void OnStateChanged(WindowState state) => _window.State = WindowState.Default;
    private void OnVisibleChanged(bool visible)
    {
        if (!visible)
        {
            OnClose();
        }
    }
}