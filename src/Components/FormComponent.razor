<RgfFormComponent @ref="_rgfFormRef" EntityParameters="EntityParameters" FormComponent="this"
                  FormGroupLayoutTemplate="FormGroupLayoutTemplate"
                  FormItemLayoutTemplate="FormItemLayoutTemplate">
    <FormTemplate Context="RgfForm">
        <EditForm EditContext="RgfForm.CurrentEditContext">
            <TelerikTabStrip PersistTabContent="true" ActiveTabIndex="ActiveTabIndex" ActiveTabIndexChanged="ActivateTab">
                @foreach (var tab in RgfForm.FormData.FormTabs)
                {
                    <TabStripTab Title="@tab.Title">
                        @foreach (var group in tab.Groups)
                        {
                            if (!string.IsNullOrEmpty(group.Title))
                            {
                                <h3>@group.Title</h3>
                            }
                            @RgfForm.GetFormGroupLayoutTemplate(new RgfFormGroupLayoutParameters(RgfForm, group))
                        }
                    </TabStripTab>
                }
            </TelerikTabStrip>
            @RgfForm.GetFormValidationTemplate()
        </EditForm>
    </FormTemplate>

    <FormItemTemplate>
        <FormItemComponent FormItemParameters="context" />
    </FormItemTemplate>

    <FormValidationTemplate>
        <TelerikValidationSummary />
    </FormValidationTemplate>
</RgfFormComponent>

@inject IJSRuntime _jsRuntime
@inject IRecroDictService RecroDict
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFormParameters FormParameters { get => EntityParameters.FormParameters; }

    private RgfFormComponent _rgfFormRef { get; set; } = null!;
    public int ActiveTabIndex { get; private set; } = 0;
    public HashSet<int> PreviouslyActiveTabs { get; private set; } = new() { 0 };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //(2023.08.22) Support field css class from FieldCssClassProvider => Unplanned
        //https://feedback.telerik.com/blazor/1564498-support-field-css-class-from-fieldcssclassprovider

        FormParameters.ErrorCssClass = FormParameters.ErrorCssClass ?? "k-invalid k-form-error";
        FormParameters.ModifiedCssClass = FormParameters.ModifiedCssClass ?? "k-valid";
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var rowIndex = FormParameters.FormViewKey.RowIndex;
        if (rowIndex != -1)
        {
            var buttons = new List<ButtonParameters>() {
                new(nameof(SvgIcon.CaretAltToLeft), RecroDict.GetRgfUiString("First"), async (arg) => await _rgfFormRef.FirstFormItemAsync()) { Disabled = rowIndex <= 0 },
                new(nameof(SvgIcon.CaretAltLeft), RecroDict.GetRgfUiString("Prev"), async (arg) => await _rgfFormRef.PrevFormItemAsync()) { Disabled = rowIndex <= 0 },
                new(nameof(SvgIcon.CaretAltRight), RecroDict.GetRgfUiString("Next"), async (arg) => await _rgfFormRef.NextFormItemAsync()) { Disabled = rowIndex + 1 >= Manager.ItemCount.Value },
                new(nameof(SvgIcon.CaretAltToRight), RecroDict.GetRgfUiString("Last"), async (arg) => await _rgfFormRef.LastFormItemAsync()) { Disabled = rowIndex + 1 >= Manager.ItemCount.Value } };
            FormParameters.DialogParameters.LeftButtons = buttons;
        }
        else
        {
            FormParameters.DialogParameters.LeftButtons = null;
        }
    }

    // public RenderFragment<RgfFormGroupLayoutParameters> FormGroupLayoutTemplate => (param) =>
    // @<TelerikGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
    //     <GridLayoutColumns>
    //         @for (int max = param.FormGroup.FlexColumnWidth == 12 ? 1 : 2, i = 0; i < max; i++)
    //         {
    //             // <GridLayoutColumn Width="@($"{Math.Round(100.0 / max, 2)}%")" />
    //             <GridLayoutColumn Width="auto" />
    //         }
    //     </GridLayoutColumns>
    //     <GridLayoutItems>
    //         @foreach (var prop in param.FormGroup.Properties)
    //         {
    //             @param.BaseFormComponent.GetFormItemLayoutTemplate(new RgfFormItemParameters(_rgfFormRef, param.FormGroup, prop))
    //         }
    //     </GridLayoutItems>
    // </TelerikGridLayout>;

    public RenderFragment<RgfFormGroupLayoutParameters> FormGroupLayoutTemplate => (param) =>
        param.BaseFormComponent.DefaultFormGroupLayoutTemplate(param);

    // public RenderFragment<RgfFormItemParameters> FormItemLayoutTemplate => (param) =>
    // @<GridLayoutItem>
    //     <div name="@param.Property.ClientName" class="@param.CssClass">
    //         @if (!string.IsNullOrEmpty(param.Property.PreElement))
    //         {
    //             @((MarkupString)param.Property.PreElement)
    //         }
    //         @param.BaseFormComponent.GetFormItemTemplate(param)
    //     </div>
    // </GridLayoutItem>;

    public RenderFragment<RgfFormItemParameters> FormItemLayoutTemplate => (param) =>
        param.BaseFormComponent.DefaultFormItemLayoutTemplate(param);

    private void ActivateTab(int index)
    {
        ActiveTabIndex = index;
        PreviouslyActiveTabs.Add(index);
    }
}