<RgfFilterComponent @ref="_rgfFilterRef" EntityParameters="EntityParameters">
    <FilterTemplate Context="RgfFilterComp">
        <FilterConditionComponent FilterComponent="RgfFilterComp" Condition="RgfFilterComp.Condition" />
    </FilterTemplate>
    <FooterTemplate Context="RgfFilterComp">
        <div class="flex-container">
            <div>
                <label>@RecroDict.GetRgfUiString("SQLTimeout"):</label>
                <TelerikNumericTextBox T="int?" @bind-Value="RgfFilterComp.FilterSettings.SQLTimeout" Arrows="false" Width="3rem" Min="0" />

                <TelerikComboBox TValue="string" TItem="string" Value="RgfFilterComp.FilterSettings.SettingsName"
                                 Data="RgfFilterComp.FilterHandler.PredefinedFilters.Select(e=> e.SettingsName)" AllowCustom="true"
                                 ValueChanged="OnValueChanged" Width="15rem" AdaptiveMode="AdaptiveMode.Auto">
                    <ComboBoxSettings>
                        <ComboBoxPopupSettings Height="auto" MaxHeight="50vh" />
                    </ComboBoxSettings>
                </TelerikComboBox>

                <TelerikComboBox ValueField="Key" TextField="Value" @bind-Value="RgfFilterComp.FilterSettings.RoleId" Data="RgfFilterComp.VisibleRoles"
                                 Enabled="!(RgfFilterComp.FilterSettings.IsReadonly == true || !RgfFilterComp.IsPublicFilterSettingAllowed || string.IsNullOrEmpty(RgfFilterComp.FilterSettings.SettingsName))" Width="13rem">
                    <ComboBoxSettings>
                        <ComboBoxPopupSettings Height="auto" MaxHeight="50vh" />
                    </ComboBoxSettings>
                </TelerikComboBox>

                <TelerikButton FillMode="@ThemeConstants.Button.FillMode.Outline" Icon="SvgIcon.Save" Title="@RecroDict.GetRgfUiString("Save")"
                               Enabled="!(RgfFilterComp.FilterSettings.IsReadonly == true || string.IsNullOrEmpty(RgfFilterComp.FilterSettings.SettingsName) || !RgfFilterComp.IsPublicFilterSettingAllowed && RgfFilterComp.FilterSettings.RoleId != null)"
                               OnClick="() => RgfFilterComp.OnSavePredefinedFilter()" />

                <TelerikButton FillMode="@ThemeConstants.Button.FillMode.Outline" Icon="SvgIcon.Trash" Title="@RecroDict.GetRgfUiString("Delete")"
                               Enabled="!(RgfFilterComp.FilterSettings.IsReadonly == true || RgfFilterComp.FilterSettings.FilterSettingsId == null || !RgfFilterComp.IsPublicFilterSettingAllowed && RgfFilterComp.FilterSettings.RoleId != null)"
                               OnClick="() => RgfFilterComp.OnDeletePredefinedFilter()" />
            </div>
            <div class="k-flex-layout k-justify-content-between k-mt-lg">
                <div>
                    <TelerikSwitch @bind-Value="RgfFilterComp.IsFilterActive" OnLabel="@RecroDict.GetRgfUiString("On")" OffLabel="@RecroDict.GetRgfUiString("Off")" />
                </div>
                <div>
                    <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Base" OnClick="RgfFilterComp.OnCancel">@RecroDict.GetRgfUiString("Cancel")</TelerikButton>
                    <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="RgfFilterComp.OnOk">OK</TelerikButton>
                </div>
            </div>
        </div>
    </FooterTemplate>
</RgfFilterComponent>

@inject IRecroDictService RecroDict
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFilterParameters FilterParameters { get => EntityParameters.FilterParameters; }

    private RgfFilterComponent _rgfFilterRef { get; set; } = null!;

    private void OnValueChanged(string value)
    {
        _rgfFilterRef.FilterSettings.SettingsName = value;
        var filter = _rgfFilterRef.FilterHandler.PredefinedFilters.FirstOrDefault(e => e.SettingsName == value);
        _rgfFilterRef.OnSetPredefinedFilter(filter?.FilterSettingsId, value);
    }
}