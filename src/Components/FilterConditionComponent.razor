<ul class="list-unstyled">
    @for (int idx = 0; idx < Condition.Conditions?.Count; idx++)
    {
        var item = Condition.Conditions[idx];
        <li>
            <div class="k-display-flex">
                <div class="k-p-1">
                    <TelerikComboBox ValueField="Key" TextField="Value" @bind-Value="item.LogicalOperator" Enabled="idx != 0" Data="LogicalOperators" ClearButton="false" Width="78px">
                        <ComboBoxSettings>
                            <ComboBoxPopupSettings Height="auto" MaxHeight="50vh" />
                        </ComboBoxSettings>
                    </TelerikComboBox>
                </div>
                <div class="k-p-1">
                    <TelerikButton FillMode="@ThemeConstants.Button.FillMode.Outline" Icon="SvgIcon.Trash" OnClick="() => OnRemoveCondition(item)" />
                </div>
                <div class="k-p-1">
                    <TelerikButton FillMode="@ThemeConstants.Button.FillMode.Outline" Icon="SvgIcon.Css" OnClick="() => OnAddBracket(item)" />
                </div>
                @if (item.Conditions != null)
                {
                    <div class="k-p-1">
                        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Warning" OnClick="() => OnRemoveBracket(item)" Title="@RecroDict.GetRgfUiString("Delete")">
                            <sup>@item.ClientId</sup><span>(</span>
                        </TelerikButton>
                    </div>
                }
                else
                {
                    <div class="k-p-1">
                        <TelerikComboBox TValue="int" TItem="KeyValuePair<int, string>" ValueField="Key" TextField="Value"
                                         Value="item.PropertyId" Data="Columns" ValueChanged="(value) => OnChangeProperty(value, item)" ClearButton="false">
                            <ComboBoxSettings>
                                <ComboBoxPopupSettings Height="auto" MaxHeight="50vh" />
                            </ComboBoxSettings>
                        </TelerikComboBox>
                    </div>
                    <div class="k-p-1">
                        <TelerikComboBox TValue="RgfFilter.QueryOperator" TItem="KeyValuePair<RgfFilter.QueryOperator, string>" ValueField="Key" TextField="Value"
                                         Value="item.QueryOperator" Data="GetQueryOperators(item)" ValueChanged="(value) => OnChangeQueryOperator(value, item)" ClearButton="false">
                            <ComboBoxSettings>
                                <ComboBoxPopupSettings Height="auto" MaxHeight="50vh" />
                            </ComboBoxSettings>
                        </TelerikComboBox>
                    </div>
                    @if (!(new[] { RgfFilter.QueryOperator.IsNull, RgfFilter.QueryOperator.IsNotNull, RgfFilter.QueryOperator.Exists }.Contains(item.QueryOperator)))
                    {
                        var prop = FilterComponent.RgfFilterProperties.Single(e => e.Id == item.PropertyId);
                        <div class="k-p-1">
                            @switch (prop.ClientDataType)
                            {
                                case ClientDataType.Integer:
                                    <TelerikNumericTextBox T="int?" @bind-Value="item.DynValue1.IntValue" />
                                    break;

                                case ClientDataType.Decimal:
                                    <TelerikNumericTextBox T="decimal?" @bind-Value="item.DynValue1.DecimalValue" Arrows="false" />
                                    break;

                                case ClientDataType.Double:
                                    <TelerikNumericTextBox T="double?" @bind-Value="item.DynValue1.DoubleValue" Arrows="false" />
                                    break;

                                case ClientDataType.DateTime:
                                    if (prop.FormType == PropertyFormType.Date)
                                    {
                                        <TelerikDatePicker T="DateTime?" @bind-Value="item.DynValue1.DateTimeValue" />
                                    }
                                    else
                                    {
                                        <TelerikDateTimePicker T="DateTime?" @bind-Value="item.DynValue1.DateTimeValue" />
                                    }
                                    break;

                                case ClientDataType.Boolean:
                                    <TelerikCheckBox @bind-Value="item.DynValue1.BooleanValue" />
                                    break;

                                default:
                                    if (prop.FormType == PropertyFormType.DropDown || prop.FormType == PropertyFormType.ListBox)
                                    {
                                        <TelerikMultiSelect TValue="string" TItem="KeyValuePair<string, string>" ValueField="Key" TextField="Value" Width="11rem"
                                                            Data="prop.Dictionary" Value="item.DynValue1.StringArray.ToList()" ValueChanged="(value) => item.DynValue1.StringArray = value.ToArray()" />
                                    }
                                    else
                                    {
                                        <TelerikTextBox @bind-Value="item.DynValue1.StringValue" />
                                    }
                                    break;
                            }
                        </div>
                        @if (new[] { RgfFilter.QueryOperator.Interval, RgfFilter.QueryOperator.IntervalE }.Contains(item.QueryOperator))
                        {
                            <div class="k-p-1">
                                @switch (prop.ClientDataType)
                                {
                                    case ClientDataType.Integer:
                                        <TelerikNumericTextBox T="int?" @bind-Value="item.DynValue2.IntValue" />
                                        break;

                                    case ClientDataType.Decimal:
                                        <TelerikNumericTextBox T="decimal?" @bind-Value="item.DynValue2.DecimalValue" Arrows="false" />
                                        break;

                                    case ClientDataType.Double:
                                        <TelerikNumericTextBox T="double?" @bind-Value="item.DynValue2.DoubleValue" Arrows="false" />
                                        break;

                                    case ClientDataType.DateTime:
                                        if (prop.FormType == PropertyFormType.Date)
                                        {
                                            <TelerikDatePicker T="DateTime?" @bind-Value="item.DynValue2.DateTimeValue" />
                                        }
                                        else
                                        {
                                            <TelerikDateTimePicker T="DateTime?" @bind-Value="item.DynValue2.DateTimeValue" />
                                        }
                                        break;

                                    default:
                                        <TelerikTextBox @bind-Value="item.DynValue2.StringValue" />
                                        break;
                                }
                            </div>
                        }
                        @if (new[] { RgfFilter.QueryOperator.Like, RgfFilter.QueryOperator.NotLike }.Contains(item.QueryOperator))
                        {
                            <div class="k-p-1">
                                <TelerikCheckBox @bind-Value="item.ToLower" />
                                <label>ToLower</label>
                            </div>
                        }
                    }
                }
            </div>
        </li>
        @if (item.Conditions != null)
        {
            <li>
                <FilterConditionComponent FilterComponent="FilterComponent" Condition="item" />
            </li>
            <li>
                <div class="k-p-1">
                    <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Warning" OnClick="() => OnRemoveBracket(item)" Title="@RecroDict.GetRgfUiString("Delete")">
                        <span>)</span><sup>@item.ClientId</sup>
                    </TelerikButton>
                </div>
            </li>
        }
    }
    <li>
        <div>
            <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" Icon="SvgIcon.Plus" OnClick="() => OnAddCondition(Condition)" />
        </div>
    </li>
</ul>

@inject IRecroDictService RecroDict
@code {

    [Parameter, EditorRequired]
    public RgfFilterComponent FilterComponent { get; set; } = null!;

    [Parameter, EditorRequired]
    public RgfFilter.Condition Condition { get; set; } = null!;

    private IRgManager Manager => FilterComponent.EntityParameters.Manager!;

    private Dictionary<int, string> Columns => FilterComponent.RgfFilterProperties.ToDictionary(p => p.Id, p => p.ColTitle);
    private Dictionary<RgfFilter.LogicalOperator, string> LogicalOperators => RgfFilter.GetLogicalOperators(RecroDict);
    private Dictionary<RgfFilter.QueryOperator, string> GetQueryOperators(RgfFilter.Condition condition) => RgfFilter.GetQueryOperators(FilterComponent.RgfFilterProperties.SingleOrDefault(e => e.Id == condition.PropertyId)?.Operators, RecroDict);

    private void OnAddCondition(RgfFilter.Condition condition) => FilterComponent.AddCondition(condition);
    private void OnRemoveCondition(RgfFilter.Condition condition) => FilterComponent.RemoveCondition(condition);
    private void OnAddBracket(RgfFilter.Condition condition) => FilterComponent.AddBracket(condition);
    private void OnRemoveBracket(RgfFilter.Condition condition) => FilterComponent.RemoveBracket(condition);
    private void OnChangeQueryOperator(RgfFilter.QueryOperator value, RgfFilter.Condition condition) => FilterComponent.ChangeQueryOperator(condition, value);
    private void OnChangeProperty(int value, RgfFilter.Condition condition) => FilterComponent.ChangeProperty(condition, value);
}