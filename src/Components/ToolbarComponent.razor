<RgfToolbarComponent @ref="_rgfToolbarRef" EntityParameters="EntityParameters">
    <ToolbarTemplate Context="RgfToolbar">
        <TelerikToolBar Class="toolbar-size" Adaptive="false">
            @if (RgfToolbar.CustomMenu != null)
            {
                <ToolBarTemplateItem>
                    @RgfToolbar.CreateCustomMenu(SvgIcon.ListUnorderedSquare)
                </ToolBarTemplateItem>
            }
            @if (Manager.EntityDesc.Options.GetBoolValue("RGO_ClientMode") != true)
            {
                <ToolBarButtonGroup>
                    <ToolBarButton Title="@RecroDict.GetRgfUiString("Refresh")" Icon="SvgIcon.ArrowRotateCw"
                                   OnClick="() => RgfToolbar.OnToolbarCommand(RgfToolbarEventKind.Refresh)" />
                    @if (Manager.EntityDesc.Options.GetBoolValue("RGO_NoFilter") != true)
                    {
                        <ToolBarButton Title="@RecroDict.GetRgfUiString("Filter")" Icon="SvgIcon.Filter"
                                       ThemeColor="@(RgfToolbar.IsFiltered ? ThemeConstants.Button.ThemeColor.Success : ThemeConstants.Button.ThemeColor.Base)"
                                       OnClick="() => RgfToolbar.OnToolbarCommand(RgfToolbarEventKind.ShowFilter)" />
                    }
                </ToolBarButtonGroup>
            }
            <ToolBarButtonGroup>
                @if (Manager.EntityDesc.Options.GetBoolValue("RGO_NoDetails") != true)
                {
                    if (RgfToolbar.BasePermissions.Add)
                    {
                        <ToolBarButton Title="@RecroDict.GetRgfUiString("New")" Icon="SvgIcon.Plus"
                                       OnClick="() => RgfToolbar.OnToolbarCommand(RgfToolbarEventKind.Add)" />
                    }
                    if (RgfToolbar.BasePermissions.Edit)
                    {
                        <ToolBarButton Title="@RecroDict.GetRgfUiString("Modify")" Icon="SvgIcon.Pencil" Enabled="RgfToolbar.IsSingleSelectedRow"
                                       OnClick="() => RgfToolbar.OnToolbarCommand(RgfToolbarEventKind.Edit)" />
                    }
                    else if (RgfToolbar.BasePermissions.Read)
                    {
                        <ToolBarButton Title="@RecroDict.GetRgfUiString("Details")" Icon="SvgIcon.DetailSection" Enabled="RgfToolbar.IsSingleSelectedRow"
                                       OnClick="() => RgfToolbar.OnToolbarCommand(RgfToolbarEventKind.Read)" />
                    }
                }
                @if (RgfToolbar.BasePermissions.Delete)
                {
                    <ToolBarButton Title="@RecroDict.GetRgfUiString("Delete")" Icon="SvgIcon.Trash" Enabled="RgfToolbar.IsSingleSelectedRow"
                                   OnClick="() => RgfToolbar.OnDelete()" />
                }
            </ToolBarButtonGroup>
            @if (RgfToolbar.EnableChart)
            {
                <ToolBarButtonGroup>
                    <ToolBarButton Title="RecroChart" Icon="SvgIcon.ChartLineStacked"
                                   OnClick="() => RgfToolbar.OnToolbarCommand(RgfToolbarEventKind.RecroChart)" />
                </ToolBarButtonGroup>
            }
            @if (RgfToolbar.SettingsMenu != null)
            {
                <ToolBarTemplateItem>
                    @* <TelerikButton Title="@RecroDict.GetRgfUiString("Setup")" Icon="SvgIcon.Gear" /> *@
                    @RgfToolbar.CreateSettingsMenu(SvgIcon.Gear)
                </ToolBarTemplateItem>
            }
            @if (RgfToolbar.SelectParam != null && Manager.EntityDesc.Options.GetBoolValue("RGO_SelectMode") == true)
            {
                <ToolBarButton Title="@RecroDict.GetRgfUiString("Select")" Icon="SvgIcon.Link" Enabled="RgfToolbar.IsSingleSelectedRow"
                               ThemeColor="@(RgfToolbar.IsSingleSelectedRow ? ThemeConstants.Button.ThemeColor.Success : ThemeConstants.Button.ThemeColor.Base)"
                               OnClick="() => RgfToolbar.OnToolbarCommand(RgfToolbarEventKind.Select)" />
            }
        </TelerikToolBar>
    </ToolbarTemplate>
</RgfToolbarComponent>

@inject IRecroDictService RecroDict
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfToolbarParameters ToolbarParameters { get => EntityParameters.ToolbarParameters; }

    private RgfToolbarComponent _rgfToolbarRef { get; set; } = null!;
}